import Product from "../Models/Product.js";
import redis from "../Libs/Redis.js";
import cloudinary from "../Libs/cloudinary.js";

async function getAllProducts(request, response) {
    try {
        const products = await Product.find({}); // fetch all the products
        response.json({ products });
    } catch (error) {
        console.log("Error in getAllProducts controller", error.message);
        response.status(500).json({ message: "Server Error", error: error.message });
    }
}

async function getFeaturedProducts(request, response) {
    try {
        let featuredProducts = await redis.get("featured_products");
        if (featuredProducts) return response.json(JSON.parse(featuredProducts));

        // if not in redis then fetch from mongodb
        // lean() is going to return a plain javascript object instead of mongodb doc
        // optimization improved by chat-gpt and suggest by friend

        featuredProducts = await Product.find({ isFeatured: true }).lean();

        if (!featuredProducts) return response.status(404).json({ message: "No featured products found" });

        // if found the store in redis

        await redis.set("featured_products", JSON.stringify(featuredProducts));

        response.json(featuredProducts);

    } catch (error) {
        console.log("Error in getFeaturedProducts controller", error.message);
        return response.status(500).json({ message: "Server Error", error: error.message });
    }
}

async function createProduct(request, response) {
    try {
        const { name, description, price, image, category } = request.body;
        let cloudinaryResponse = null;
        if (image) cloudinaryResponse = await cloudinary.uploader.upload(image, { folder: "products" });

        const product = await Product.create({
            name,
            description,
            price,
            image: cloudinaryResponse?.secure_url ? cloudinaryResponse.secure_url : "",
            category
        });

        response.status(201).json(product);

    } catch (error) {
        console.log("Error in createProduct controller", error.message);
        response.status(500).json({ message: "Server error", error: error.message });
    }
}

async function deleteProduct(request, response) {
    try {
        const product = await Product.findById(request.params.id);

        if (!product) return response.status(404).json({ message: "Product not found" });

        if (product.image) {
            // below line generated by chat-gpt
            const publicId = product.image.split("/").pop().split(".")[0]; // this will get the id of the image
            try {
                await cloudinary.uploader.destroy(`products/${publicId}`);
                console.log("Delete product image from cloudinary");
            } catch (error) {
                console.log("Error while deleting image from cloudinary", error);
            }
        }

        await Product.findByIdAndDelete(request.params.id);

        response.json({ message: "Product deleted successfully" });

    } catch (error) {
        console.log("Error in deleteProduct controller", error.message);
        response.status(500).json({ message: "Server error", error: error.message });
    }
}

async function getRecommendedProduct(request, response) {
    try {
        const products = await Product.aggregate([
            {
                $sample: { size: 3 }
            }, {
                $project: {
                    _id: 1,
                    name: 1,
                    description: 1,
                    image: 1,
                    price: 1
                }
            }
        ]);

        response.json(products);

    } catch (error) {
        console.log("Error in getRecommendedProduct controller", error.message);
        response.status(500).json({ message: "Server error", error: error.message });
    }
}

async function getProductsByCategory(request, response) {
    try {
        const { category } = request.params;
        const products = await Product.find({ category });
        response.json({ products });

    } catch (error) {
        console.log("Error in getProductsByCategory controller ", error.message);
        response.status(500).json({ message: "Server error", error: error.message });
    }
}

// @helper function
async function updateFeaturedProductCache() {
    try {
        const featuredProducts = await Product.find({ isFeatured: true }).lean();
        await redis.set("featured_products", JSON.stringify(featuredProducts));
    } catch (error) {
        console.log("Error in update cache function", error.message);
    }
}


async function toggleFeaturedProduct(request, response) {
    try {
        const product = await Product.findById(request.params.id);
        if (product) {
            product.isFeatured = !product.isFeatured; // flipping and storing the data
            const updatedProduct = await product.save();
            await updateFeaturedProductCache();
            response.json(updatedProduct);
        }
        else {
            response.status(404).json({ message: "Product not found" });
        }
    } catch (error) {
        console.log("Error in toggleFeaturedProduct controller", error.message);
        response.status(500).json({ message: "Server error", error: error.message });
    }
}

export { getAllProducts, getFeaturedProducts, createProduct, deleteProduct, getRecommendedProduct, getProductsByCategory, toggleFeaturedProduct };